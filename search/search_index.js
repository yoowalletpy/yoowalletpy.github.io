var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"YooWallet","text":"<p>\u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 SDK \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API \u042e\u043c\u0430\u043d\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438 \u0441\u0431\u043e\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 Python .</p>"},{"location":"index.html#_1","title":"\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435","text":"<p>\u0414\u0430\u043d\u043d\u044b\u0439 SDK \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u0445 \u0438 \u0440\u0438\u0441\u043a!</p>"},{"location":"index.html#_2","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e/\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u042e\u043c\u0430\u043d\u0438 (\u043f\u043e\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435)</li> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0438\u0445 \u0434\u0435\u0442\u0430\u043b\u0435\u0439</li> <li>\u0412\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b (QuickPay)</li> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043f\u0440\u0438\u0451\u043c\u0430 HTTP \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 (\u0441\u044b\u0440\u043e\u0439 \u0438 \u043f\u043e\u043a\u0430 \u0431\u0435\u0437 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 TLS, \u0421\u0415\u0419\u0427\u0410\u0421 \u041d\u0415 \u0418\u0421\u041f\u041e\u041b\u042c\u0417\u0423\u0419\u0422\u0415!)</li> </ul>"},{"location":"index.html#_3","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e","text":"<ul> <li> \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f</li> <li> \u041e\u0442\u043e\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li> \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435</li> <li> \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439</li> <li> \u0414\u0435\u0442\u0430\u043b\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439</li> <li> \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430</li> <li> \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430</li> <li> QuickPay</li> <li> HTTP \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f<ul> <li> \u0421\u044b\u0440\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f</li> <li> \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 TLS</li> </ul> </li> </ul>"},{"location":"index.html#_4","title":"\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438","text":"<ul> <li>\u0412\u0434\u043e\u0445\u043d\u043e\u0432\u043b\u0451\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c: https://github.com/AlekseyKorshuk/yoomoney-api</li> <li>API \u042e\u043c\u0430\u043d\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430: https://yoomoney.ru/docs/wallet</li> <li>API \u042e\u043c\u0430\u043d\u0438 \u0441\u0431\u043e\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432: https://yoomoney.ru/docs/payment-buttons</li> </ul> <p>\u041f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u044b?</p> <p>\u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u043a \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u043a\u0430\u043d\u0430\u043b\u0443 \u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438  (\u0437\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u044b )</p> <p>\u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0433\u0430\u0439\u0434\u0443 \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c YooWallet.</p>"},{"location":"authorization.html","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u042e\u043c\u0430\u043d\u0438. \u0427\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e - \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435: https://yoomoney.ru/myservices/new.</p> <p>\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u043e\u043b\u044f (\u043d\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0439\u0442\u0435 OAuth2!) \u0438 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443.</p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c client_id \u0438 redirect_url,  \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 Authorizer.</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c yoowallet \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0430\u044f \u0442\u043e\u043a\u0435\u043d - \u0432\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043a \u0441\u0432\u043e\u0435\u043c\u0443 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0443 \u0438  \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u042d\u0442\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f scope.</p>"},{"location":"authorization.html#scope","title":"Scope","text":"<p>Scope \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d Authorizer \u043f\u0440\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u0432\u0438\u0434\u0435 python \u0441\u043f\u0438\u0441\u043a\u0430.</p> <p>\u042d\u0442\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f:</p> <p>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a</p> <p>\u0412\u0441\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432\u0437\u044f\u0442\u044b \u043e\u0442\u0441\u044e\u0434\u0430: https://yoomoney.ru/docs/wallet/using-api/authorization/protocol-rights</p> \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 account-info \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 operation-history \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 operation-details \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439 \u043e\u0431 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 payment \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0432 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445 \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u0435\u043d\u044c\u0433\u0438 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0447\u0435\u0442\u0430 payment-shop \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u044c \u0432 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445 payment-p2p \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u0435\u043d\u044c\u0433\u0438 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043e\u0448\u0435\u043b\u0451\u043a <p>\u0414\u0440\u0443\u0433\u0438\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f</p> <p>\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0431\u044b\u043b\u0438 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b - \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f (\u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043d\u043e \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u043d\u044b)</p>"},{"location":"authorization.html#_2","title":"\u0422\u043e\u043a\u0435\u043d","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u043a \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0442\u043e\u043a\u0435\u043d\u0430.</p> <p>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043e\u0442\u0440\u044b\u0432\u043e\u043a \u043a\u043e\u0434\u0430 \u0432\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442: <pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.utils import Authorizer\nfrom yoowallet.types import AccountInfo\n\nCLIENT_ID = \"\u0432\u0430\u0448 client_id\"\nREDIRECT_URI = \"\u0432\u0430\u0448 redirect_uri\"\n\nasync def main():\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430\n    # \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 scope, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\n    # \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - ['account-info']\n    auth = Authorizer(\n        CLIENT_ID,\n        REDIRECT_URI\n    )\n    print(await auth.generate_code_url())\n    code = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0434: \")\n    print(\"\u0412\u0430\u0448 \u0442\u043e\u043a\u0435\u043d:\")\n    print(await auth.get_token(code))\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\n    app: App = App(auth.token)\n    if not await app.connect():\n        raise ValueError(\"\u0422\u043e\u043a\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d!\")\n    print(\"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0433\u043e\u0442\u043e\u0432\u043e!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"authorization.html#_3","title":"\u041e\u0442\u043e\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c scope \u0438\u043b\u0438 \u043e\u043d \u0441\u0442\u0430\u043b \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c, \u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u044b\u0445\u043e\u0434 - \u043e\u0442\u043e\u0437\u0432\u0430\u0442\u044c \u0435\u0433\u043e.</p> <p>\u041f\u0440\u043e\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430: <pre><code>import asyncio\nfrom yoowallet.utils import revoke_token\n\nTOKEN = \"\u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d\"\n\nasync def main():\n    if await revoke_token(TOKEN):\n        print(\"\u0422\u043e\u043a\u0435\u043d \u043e\u0442\u043e\u0437\u0432\u0430\u043d!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main()\n</code></pre></p>"},{"location":"development.html","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 YooWallet SDK","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0436\u0438\u0437\u043d\u0438 YooWallet:</p> <ul> <li>\u0412\u043d\u043e\u0441\u0438\u0442\u0435 \u0432\u043a\u043b\u0430\u0434 \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435  ( \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442\u0441\u044f )</li> <li>\u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u043a \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u043a\u0430\u043d\u0430\u043b\u0443 \u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438  (\u0437\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u044b )</li> <li>\u041f\u043e\u0434\u043f\u0438\u0448\u0438\u0442\u0435\u0441\u044c \u043d\u0430 YouTube  \u0438\u043b\u0438 Telegram  \u043a\u0430\u043d\u0430\u043b \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (\u0431\u0443\u0434\u0443\u0442 \u0430\u043d\u043e\u043d\u0441\u044b \u043d\u043e\u0432\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439, \u0444\u0438\u0448\u0435\u043a, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435)</li> </ul>"},{"location":"installation.html","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<p>\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438:</p> <ul> <li>\u0427\u0435\u0440\u0435\u0437 PyPI</li> <li>\u0418\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430</li> </ul> <p>\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 Python</p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438: <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre></p>"},{"location":"installation.html#pypi","title":"\u0427\u0435\u0440\u0435\u0437 PyPI","text":"<p>\u0412\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c SDK \u0447\u0435\u0440\u0435\u0437 PyPI: <pre><code># \u0411\u0430\u0437\u043e\u0432\u044b\u0439\npip install yoowallet\n\n# \u0421 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e API\npip install yoowallet[sync]\n\n# \u0421 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438 \u0434\u043b\u044f \u0440\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\npip install yoowallet[dev]\n</code></pre></p>"},{"location":"installation.html#_2","title":"\u0418\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430","text":"<p>\u0422\u0430\u043a\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 SDK \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430: <pre><code>git clone &lt;repo&gt;\ncd yoowallet\npip install .\n</code></pre></p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0430\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 </p>"},{"location":"quickstart.html","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f YooWallet</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b</p> <p>\u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 tests/ \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</p> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435</li> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439</li> <li>QuickPay</li> <li>Sync API</li> <li>HTTP \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"quickstart.html#_2","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435","text":"<pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.types import AccountInfo\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"\u0422\u043e\u043a\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d!\")\n    app_info: AccountInfo = await app.account_info()\n    app_info.debug()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"quickstart.html#_3","title":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439","text":"<p>\u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438</p> <p>\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a API Reference \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445</p> <pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.types import OperationHistory\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"\u0422\u043e\u043a\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d!\")\n    # \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\n    history: OperationHistory = await app.operation_history()\n    print(\"[*] \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:\")\n    history.debug()\n\n    # \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0447\u0430\u0441\n    from datetime import datetime\n    date = datetime.now()\n    date = date.replace(hour = date.hour - 1)\n    history: OperationHistory = await app.operation_history(from_time = date)\n    print(\"[*] \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0447\u0430\u0441:\")\n    history.debug()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"quickstart.html#quickpay","title":"QuickPay","text":"<p>QuickPay</p> <p>QuickPay \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043d\u0430\u0442\u043e\u0432 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0442\u044c label \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438\u0445 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u0430 \u0434\u0435\u043d\u0435\u0433:: <pre><code>import asyncio\nfrom yoowallet import App\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"\u0422\u043e\u043a\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d!\")\n    # \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c label \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\n    payment = await app.quickpay(2.0, label = \"\u043a\u0430\u043a\u043e\u0439_\u043d\u0438\u0431\u0443\u0434\u044c_\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439_id\")\n    print(f\"[*] \u0421\u0441\u044b\u043b\u043a\u0430 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b: {payment['url']} ({payment['amount_due']} \u0440\u0443\u0431. \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e)\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> <p>\u041a\u0441\u0442\u0430\u0442\u0438, \u0432 App \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 QuickPay \u0438\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: <pre><code>import asyncio\nfrom yoowallet import App\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"\u0422\u043e\u043a\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d!\")\n    if await app.get_by_label(\"\u0432\u0430\u0448 label\"):\n        print(\"[*] \u041e\u043f\u043b\u0430\u0442\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"quickstart.html#sync-api","title":"Sync API","text":"<p>\u041f\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Yoowallet \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Sync API. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e API \u0438\u043c\u0435\u0435\u0442 \u0442\u0435 \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u0447\u0442\u043e \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435:</p> <p>Sync API</p> <p>\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API - \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0439\u043f\u0443\u0441\u043a yoowallet. \u041f\u043e\u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u0447\u043d\u043e\u043c\u0443 \u0433\u0430\u0439\u0434\u0443 \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435.</p> <pre><code>from yoowallet.sync import App\nfrom yoowallet.types import AccountInfo\n\napp: App = App(\"TOKEN\")\nif not app.connect():\n    raise ValueError(\"\u0422\u043e\u043a\u0435\u043d \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d!\")\napp.account_info().debug()\n</code></pre>"},{"location":"quickstart.html#http","title":"HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439","text":"<p>\u0412\u041d\u0418\u041c\u0410\u041d\u0418\u0415</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0435\u0449\u0451 \u043d\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d. \u0418\u0437-\u0437\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u041e\u0427\u0415\u041d\u042c \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c. \u0422\u0430\u043a, \u043a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043f\u0438\u0441\u0430\u043d - \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e</p> <p>\u041d\u043e \u0432\u044b \u0441\u0435\u0439\u0447\u0430\u0441 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0432 \u043f\u0430\u043f\u043a\u0435 tests/ \u043d\u0430 \u0441\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u0445 \u0438 \u0440\u0438\u0441\u043a.</p>"},{"location":"en/index.html","title":"YooWallet","text":"<p>This is simple python SDK for Yoomoney Wallet and Fundraising (deals with Quickpay) APIs for Python .</p>"},{"location":"en/index.html#notice","title":"Notice","text":"<p>This SDK is not official and in development, software comes as is, use at your own risk!</p>"},{"location":"en/index.html#features","title":"Features","text":"<ul> <li>Support both async and sync usage</li> <li>Utils for authorizing Yoomoney apps (only async now)</li> <li>Getting account information, operation history, it's detailes</li> <li>Fundraising (QuickPay)</li> <li>HTTP notification server (raw and without TLS support yet, DO NOT USE IT NOW!)</li> </ul>"},{"location":"en/index.html#list-of-implemented","title":"List of Implemented","text":"<ul> <li> Authorization</li> <li> Revoking app token</li> <li> Getting account info</li> <li> Operation history</li> <li> Operation details</li> <li> Perform payment</li> <li> Process payment</li> <li> QuickPay</li> <li> HTTP notifications (partially)<ul> <li> Raw realization</li> <li> TLS support</li> </ul> </li> </ul>"},{"location":"en/index.html#sources","title":"Sources","text":"<ul> <li>Inspired by: https://github.com/AlekseyKorshuk/yoomoney-api</li> <li>Yoomoney Wallet API: https://yoomoney.ru/docs/wallet</li> <li>Yoomoney Fundrising API: https://yoomoney.ru/docs/payment-buttons</li> </ul> <p>Have some questions?</p> <p>Join developers telegram channel  (here you can ask some questions )</p> <p>Follow installation guide to start working with YooWallet.</p>"},{"location":"en/api_reference.html","title":"API Reference","text":"<p>In development</p> <p>There is only initial API reference, thats why the provided info may be not full</p>"},{"location":"en/api_reference.html#apps","title":"Apps","text":""},{"location":"en/api_reference.html#app","title":"App","text":"<p>Class for interacting with Yoomoney APIs.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Yoomoney application token (can get via Authorizer)</p> required <p>Attributes:</p> Name Type Description <code>token</code> <code>str</code> <p>Yoomoney application token (can get via Authorizer)</p> <code>headers</code> <code>Dict[str, str]</code> <p>Default headers for API requests</p> <p>Example: <pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.types import AccountInfo\n\nasync def main():\n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError('Token is invalid!')\n    app_info = await app.account_info()\n    app_info.debug()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> Source code in <code>yoowallet/core/app.py</code> <pre><code>class App:\n    \"\"\"Class for interacting with Yoomoney APIs.\n\n    Args:\n        token (str): Yoomoney application token (can get via Authorizer)\n\n    Attributes:\n        token (str): Yoomoney application token (can get via Authorizer)\n        headers (Dict[str, str]): Default headers for API requests\n\n    Example:\n    ```python\n    import asyncio\n    from yoowallet import App\n    from yoowallet.types import AccountInfo\n\n    async def main():\n        app: App = App(\"TOKEN\")\n        if not await app.connect():\n            raise ValueError('Token is invalid!')\n        app_info = await app.account_info()\n        app_info.debug()\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n    \"\"\"\n    def __init__(self, token: str) -&gt; None:\n        self.token = token\n        self._base_url = \"https://yoomoney.ru\"\n        self.headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": f\"Bearer {self.token}\"\n        }\n\n    async def connect(self) -&gt; bool:\n        \"\"\"Verifying App's token via getting account information\n\n        Returns:\n            True if token is valid, False if invalid\n        \"\"\"\n        try:\n            await self.account_info()\n            return True\n        except Exception:\n            return False\n\n    async def account_info(self) -&gt; AccountInfo:\n        \"\"\"Getting account information. Needs at least this scope: [\"account-info\"]\n\n        Returns:\n            AccountInfo entity\n        \"\"\"\n        # Generating URL\n        url = f\"{self._base_url}/api/account-info\"\n        async with aiohttp.ClientSession() as session:\n            async with session.post(url=url, headers=self.headers) as response:\n                if response.status == 200:\n                    response = await response.json()\n                    return AccountInfo(response)\n                elif response.status == 401:\n                    raise InvalidToken\n                else:\n                    raise AccountInfoError(f\"Undefined error, answer: {response}\")\n\n    async def operation_history(\n            self,\n            type: Optional[List[str]] = None,\n            label: Optional[str] = None,\n            from_time: Optional[datetime] = None,\n            till_time: Optional[datetime] = None,\n            start_record: Optional[str] = None,\n            records: Optional[int] = None,\n            details: Optional[bool] = None\n            ) -&gt; OperationHistory:\n        \"\"\"Getting operation history. Needs at least this scope: [\"operation-history\", \"operation-details\"]\n\n        Args:\n            type (Optional[List[str]]): Operation types (deposition or payment)\n            label (Optional[str]): Filtering value (custom operation id)\n            from_time (Optional[datetime]): Operations from this timestamp\n            till_time (Optional[datetime]): Operations till this timestamp\n            start_record (Optional[str]): Operations from this number\n            records (Optional[int]): Number of history records\n            details (Optional[bool]): Show operation details (True or False)\n\n        Returns:\n            OperationHistory entity\n        \"\"\"\n        # Generating request params\n        params = {}\n        if type is not None:\n            params[\"type\"] = type\n        if label is not None:\n            params[\"label\"] = label\n        # Defining default time format\n        time_format = \"%Y-%m-%dT%H:%M:%S\"\n        # Parsing datetimes\n        if from_time is not None:\n            try:\n                params[\"from\"] = datetime.strftime(from_time, time_format)\n            except Exception:\n                raise IllegalParamFrom(\"Failed to format input\")\n        if till_time is not None:\n            try:\n                params[\"till\"] = datetime.strftime(till_time, time_format)\n            except Exception:\n                raise IllegalParamTill(\"Failed to format input\")\n        if start_record is not None:\n            params[\"start_record\"] = start_record\n        if records is not None:\n            params[\"records\"] = str(records)\n        if details is not None:\n            params[\"details\"] = details\n        # Generating URL\n        url = f\"{self._base_url}/api/operation-history\"\n        async with aiohttp.ClientSession() as session:\n            async with session.post(url=url, headers=self.headers, data=params) as response:\n                # Errors processing\n                if response.status in [401, 403]:\n                    raise InvalidToken\n                response = await response.json()\n                if \"error\" in response:\n                    if response[\"error\"] == \"illegal_param_type\":\n                        raise IllegalParamType(\"Try to redefine it in another way\")\n                    elif response[\"error\"] == \"illegal_param_start_record\":\n                        raise IllegalParamStartRecord(\"Try to redefine it in another way'\")\n                    elif response[\"error\"] == \"illegal_param_records\":\n                        raise IllegalParamRecords(\"Try to redefine it in another way'\")\n                    elif response[\"error\"] == \"illegal_param_label\":\n                        raise IllegalParamLabel(\"Try to redefine it in another way'\")\n                    elif response[\"error\"] == \"illegal_param_from\":\n                        raise IllegalParamFrom(\"Try to redefine it in another way'\")\n                    elif response[\"error\"] == \"illegal_param_till\":\n                        raise IllegalParamTill(\"Try to redefine it in another way'\")\n                    else:\n                        raise HistoryTechicalError(\"Try again later'\")\n                return OperationHistory(response)\n\n    async def quickpay(\n            self,\n            sum: float,\n            payment_type: str = \"AC\",\n            label: Optional[str] = None,\n            success_url: Optional[str] = None\n            ) -&gt; Dict[str, Any]: # type: ignore\n        \"\"\"Creating fundraising link\n\n        Example:\n        ```python\n        import asyncio\n        from yoowallet import App\n\n        async def main():\n            app: App = App(\"TOKEN\")\n            if not await app.connect():\n                raise ValueError('Token is invalid!')\n            # Generating fundraising for 5 RUB\n            payment = await app.quickpay(5.0)\n            print(f\"QucikPay URL is {payment['url']}\")\n\n        if __name__ == \"__main__\":\n            asyncio.run(main())\n        ```\n\n        Args:\n            sum (float): Transfer amount (the amount debited from the sender)\n            payment_type (str): PC for a payment from a YooMoney wallet, AC for a payment from a bank card\n            label (str): The label that a site or app assigns to a certain transfer\n            success_url (str): URL where the user is redirected after the transfer\n\n        Returns:\n            Python dictionary with fields: url and amount_due (the amount, that will be received)\n        \"\"\"\n        # Getting the number of YooMoney wallet\n        receiver: str = (await self.account_info()).account\n        # Computing the amount to be received\n        commissions = {\"PC\": 0.01, \"AC\": 0.03}\n        amount_due: float = sum*(1-commissions[payment_type])\n        # Generating params\n        params = {}\n        params[\"receiver\"] = receiver\n        params[\"sum\"] = sum\n        params[\"quickpay-form\"] = \"button\"\n        params[\"paymentType\"] = payment_type\n        if label:\n            params[\"label\"] = label\n        if success_url:\n            params[\"successURL\"] = success_url\n        async with aiohttp.ClientSession() as session:\n            async with session.post(url=\"https://yoomoney.ru/quickpay/confirm\", headers=self.headers, data=params) as response:\n                if response.status == 200:\n                    return {\"url\": response.url, \"amount_due\": amount_due}\n                else:\n                    # There must be an error handler, but YooMoney didn't provide\n                    # any error list for QuickPay :(\n                    raise FailedQuickPayGen(response.status)\n\n    async def get_by_label(self, label: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Checks whether payment with such label exists\n\n        Args:\n            label (str): Lable of needed operation\n\n        Returns:\n            Operation details \n        \"\"\"\n        operation = (await self.operation_history(label = label)).operations\n        if not operation or len(operation) &gt; 1:\n            return\n        return operation[0]\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.App.account_info","title":"<code>account_info()</code>  <code>async</code>","text":"<p>Getting account information. Needs at least this scope: [\"account-info\"]</p> <p>Returns:</p> Type Description <code>AccountInfo</code> <p>AccountInfo entity</p> Source code in <code>yoowallet/core/app.py</code> <pre><code>async def account_info(self) -&gt; AccountInfo:\n    \"\"\"Getting account information. Needs at least this scope: [\"account-info\"]\n\n    Returns:\n        AccountInfo entity\n    \"\"\"\n    # Generating URL\n    url = f\"{self._base_url}/api/account-info\"\n    async with aiohttp.ClientSession() as session:\n        async with session.post(url=url, headers=self.headers) as response:\n            if response.status == 200:\n                response = await response.json()\n                return AccountInfo(response)\n            elif response.status == 401:\n                raise InvalidToken\n            else:\n                raise AccountInfoError(f\"Undefined error, answer: {response}\")\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.App.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>Verifying App's token via getting account information</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if token is valid, False if invalid</p> Source code in <code>yoowallet/core/app.py</code> <pre><code>async def connect(self) -&gt; bool:\n    \"\"\"Verifying App's token via getting account information\n\n    Returns:\n        True if token is valid, False if invalid\n    \"\"\"\n    try:\n        await self.account_info()\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.App.get_by_label","title":"<code>get_by_label(label)</code>  <code>async</code>","text":"<p>Checks whether payment with such label exists</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Lable of needed operation</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Operation details</p> Source code in <code>yoowallet/core/app.py</code> <pre><code>async def get_by_label(self, label: str) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Checks whether payment with such label exists\n\n    Args:\n        label (str): Lable of needed operation\n\n    Returns:\n        Operation details \n    \"\"\"\n    operation = (await self.operation_history(label = label)).operations\n    if not operation or len(operation) &gt; 1:\n        return\n    return operation[0]\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.App.operation_history","title":"<code>operation_history(type=None, label=None, from_time=None, till_time=None, start_record=None, records=None, details=None)</code>  <code>async</code>","text":"<p>Getting operation history. Needs at least this scope: [\"operation-history\", \"operation-details\"]</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Optional[List[str]]</code> <p>Operation types (deposition or payment)</p> <code>None</code> <code>label</code> <code>Optional[str]</code> <p>Filtering value (custom operation id)</p> <code>None</code> <code>from_time</code> <code>Optional[datetime]</code> <p>Operations from this timestamp</p> <code>None</code> <code>till_time</code> <code>Optional[datetime]</code> <p>Operations till this timestamp</p> <code>None</code> <code>start_record</code> <code>Optional[str]</code> <p>Operations from this number</p> <code>None</code> <code>records</code> <code>Optional[int]</code> <p>Number of history records</p> <code>None</code> <code>details</code> <code>Optional[bool]</code> <p>Show operation details (True or False)</p> <code>None</code> <p>Returns:</p> Type Description <code>OperationHistory</code> <p>OperationHistory entity</p> Source code in <code>yoowallet/core/app.py</code> <pre><code>async def operation_history(\n        self,\n        type: Optional[List[str]] = None,\n        label: Optional[str] = None,\n        from_time: Optional[datetime] = None,\n        till_time: Optional[datetime] = None,\n        start_record: Optional[str] = None,\n        records: Optional[int] = None,\n        details: Optional[bool] = None\n        ) -&gt; OperationHistory:\n    \"\"\"Getting operation history. Needs at least this scope: [\"operation-history\", \"operation-details\"]\n\n    Args:\n        type (Optional[List[str]]): Operation types (deposition or payment)\n        label (Optional[str]): Filtering value (custom operation id)\n        from_time (Optional[datetime]): Operations from this timestamp\n        till_time (Optional[datetime]): Operations till this timestamp\n        start_record (Optional[str]): Operations from this number\n        records (Optional[int]): Number of history records\n        details (Optional[bool]): Show operation details (True or False)\n\n    Returns:\n        OperationHistory entity\n    \"\"\"\n    # Generating request params\n    params = {}\n    if type is not None:\n        params[\"type\"] = type\n    if label is not None:\n        params[\"label\"] = label\n    # Defining default time format\n    time_format = \"%Y-%m-%dT%H:%M:%S\"\n    # Parsing datetimes\n    if from_time is not None:\n        try:\n            params[\"from\"] = datetime.strftime(from_time, time_format)\n        except Exception:\n            raise IllegalParamFrom(\"Failed to format input\")\n    if till_time is not None:\n        try:\n            params[\"till\"] = datetime.strftime(till_time, time_format)\n        except Exception:\n            raise IllegalParamTill(\"Failed to format input\")\n    if start_record is not None:\n        params[\"start_record\"] = start_record\n    if records is not None:\n        params[\"records\"] = str(records)\n    if details is not None:\n        params[\"details\"] = details\n    # Generating URL\n    url = f\"{self._base_url}/api/operation-history\"\n    async with aiohttp.ClientSession() as session:\n        async with session.post(url=url, headers=self.headers, data=params) as response:\n            # Errors processing\n            if response.status in [401, 403]:\n                raise InvalidToken\n            response = await response.json()\n            if \"error\" in response:\n                if response[\"error\"] == \"illegal_param_type\":\n                    raise IllegalParamType(\"Try to redefine it in another way\")\n                elif response[\"error\"] == \"illegal_param_start_record\":\n                    raise IllegalParamStartRecord(\"Try to redefine it in another way'\")\n                elif response[\"error\"] == \"illegal_param_records\":\n                    raise IllegalParamRecords(\"Try to redefine it in another way'\")\n                elif response[\"error\"] == \"illegal_param_label\":\n                    raise IllegalParamLabel(\"Try to redefine it in another way'\")\n                elif response[\"error\"] == \"illegal_param_from\":\n                    raise IllegalParamFrom(\"Try to redefine it in another way'\")\n                elif response[\"error\"] == \"illegal_param_till\":\n                    raise IllegalParamTill(\"Try to redefine it in another way'\")\n                else:\n                    raise HistoryTechicalError(\"Try again later'\")\n            return OperationHistory(response)\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.App.quickpay","title":"<code>quickpay(sum, payment_type='AC', label=None, success_url=None)</code>  <code>async</code>","text":"<p>Creating fundraising link</p> <p>Example: <pre><code>import asyncio\nfrom yoowallet import App\n\nasync def main():\n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError('Token is invalid!')\n    # Generating fundraising for 5 RUB\n    payment = await app.quickpay(5.0)\n    print(f\"QucikPay URL is {payment['url']}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>sum</code> <code>float</code> <p>Transfer amount (the amount debited from the sender)</p> required <code>payment_type</code> <code>str</code> <p>PC for a payment from a YooMoney wallet, AC for a payment from a bank card</p> <code>'AC'</code> <code>label</code> <code>str</code> <p>The label that a site or app assigns to a certain transfer</p> <code>None</code> <code>success_url</code> <code>str</code> <p>URL where the user is redirected after the transfer</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Python dictionary with fields: url and amount_due (the amount, that will be received)</p> Source code in <code>yoowallet/core/app.py</code> <pre><code>async def quickpay(\n        self,\n        sum: float,\n        payment_type: str = \"AC\",\n        label: Optional[str] = None,\n        success_url: Optional[str] = None\n        ) -&gt; Dict[str, Any]: # type: ignore\n    \"\"\"Creating fundraising link\n\n    Example:\n    ```python\n    import asyncio\n    from yoowallet import App\n\n    async def main():\n        app: App = App(\"TOKEN\")\n        if not await app.connect():\n            raise ValueError('Token is invalid!')\n        # Generating fundraising for 5 RUB\n        payment = await app.quickpay(5.0)\n        print(f\"QucikPay URL is {payment['url']}\")\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n\n    Args:\n        sum (float): Transfer amount (the amount debited from the sender)\n        payment_type (str): PC for a payment from a YooMoney wallet, AC for a payment from a bank card\n        label (str): The label that a site or app assigns to a certain transfer\n        success_url (str): URL where the user is redirected after the transfer\n\n    Returns:\n        Python dictionary with fields: url and amount_due (the amount, that will be received)\n    \"\"\"\n    # Getting the number of YooMoney wallet\n    receiver: str = (await self.account_info()).account\n    # Computing the amount to be received\n    commissions = {\"PC\": 0.01, \"AC\": 0.03}\n    amount_due: float = sum*(1-commissions[payment_type])\n    # Generating params\n    params = {}\n    params[\"receiver\"] = receiver\n    params[\"sum\"] = sum\n    params[\"quickpay-form\"] = \"button\"\n    params[\"paymentType\"] = payment_type\n    if label:\n        params[\"label\"] = label\n    if success_url:\n        params[\"successURL\"] = success_url\n    async with aiohttp.ClientSession() as session:\n        async with session.post(url=\"https://yoomoney.ru/quickpay/confirm\", headers=self.headers, data=params) as response:\n            if response.status == 200:\n                return {\"url\": response.url, \"amount_due\": amount_due}\n            else:\n                # There must be an error handler, but YooMoney didn't provide\n                # any error list for QuickPay :(\n                raise FailedQuickPayGen(response.status)\n</code></pre>"},{"location":"en/api_reference.html#app-sync-version","title":"App (sync version)","text":"<p>Class for interacting with Yoomoney APIs synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Yoomoney application token (can get via Authorizer)</p> required <p>Attributes:</p> Name Type Description <code>token</code> <code>str</code> <p>Yoomoney application token (can get via Authorizer) </p> <code>headers</code> <code>Dict[str, str]</code> <p>Default headers for API requests</p> <p>Example: <pre><code>from yoowallet.sync import App\nfrom yoowallet.types import AccountInfo\n\napp: App = App(\"TOKEN\")\nif not app.connect():\n    raise ValueError('Token is invalid!')\napp_info = app.account_info()\napp_info.debug()\n</code></pre></p> Source code in <code>yoowallet/sync/app.py</code> <pre><code>class App:\n    \"\"\"Class for interacting with Yoomoney APIs synchronously.\n\n    Args:\n        token (str): Yoomoney application token (can get via Authorizer)\n\n    Attributes:\n        token (str): Yoomoney application token (can get via Authorizer) \n        headers (Dict[str, str]): Default headers for API requests\n\n    Example:\n    ```python\n    from yoowallet.sync import App\n    from yoowallet.types import AccountInfo\n\n    app: App = App(\"TOKEN\")\n    if not app.connect():\n        raise ValueError('Token is invalid!')\n    app_info = app.account_info()\n    app_info.debug()\n    ```\n    \"\"\"\n    def __init__(self, token: str) -&gt; None:\n        self.token = token\n        self._base_url = \"https://yoomoney.ru\"\n        self.headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": f\"Bearer {self.token}\"\n        }\n\n    def account_info(self) -&gt; AccountInfo:\n        \"\"\"Getting account information. Needs at least this scope: [\"account-info\"]\n\n        Returns:\n            AccountInfo entity\n        \"\"\"\n        # Generating URL\n        url = f\"{self._base_url}/api/account-info\"\n        response = requests.post(url=url, headers=self.headers)\n        if response.status_code == 200:\n            response = response.json()\n            return AccountInfo(response)\n        elif response.status_code == 401:\n            raise InvalidToken \n        else:\n            raise AccountInfoError(f\"Undefined error, answer: {response}\")\n\n    def connect(self) -&gt; bool:\n        \"\"\"Verifying App's token via getting account information\n\n        Returns:\n            True if token is valid, False if invalid\n        \"\"\"\n        try:\n            self.account_info()\n            return True\n        except Exception:\n            return False\n\n    def operation_history(\n            self,\n            type: Optional[List[str]] = None,\n            label: Optional[str] = None,\n            from_time: Optional[datetime] = None,\n            till_time: Optional[datetime] = None,\n            start_record: Optional[str] = None,\n            records: Optional[int] = None,\n            details: Optional[bool] = None\n            ) -&gt; OperationHistory:\n        \"\"\"Getting operation history. Needs at least this scope: [\"operation-history\", \"operation-details\"]\n\n        Example:\n        ```python\n        from yoowallet.sync import App\n        from yoowallet.types import OperationHistory\n\n        # ! Provide scope if you want not just get account information\n        app: App = App(\"TOKEN\")\n        if not app.connect():\n            raise ValueError('Token is invalid!')\n        app_info = app.operation_history()\n        app_info.debug()\n        ```\n\n        Args:\n            type (Optional[List[str]]): Operation types (deposition or payment)\n            label (Optional[str]): Filtering value (custom operation id)\n            from_time (Optional[datetime]): Operations from this timestamp\n            till_time (Optional[datetime]): Operations till this timestamp\n            start_record (Optional[str]): Operations from this number\n            records (Optional[int]): Number of history records\n            details (Optional[bool]): Show operation details (True or False)\n\n        Returns:\n            OperationHistory entity\n        \"\"\"\n        # Generating request params\n        params = {}\n        if type is not None:\n            params[\"type\"] = type\n        if label is not None:\n            params[\"label\"] = label\n        # Defining default time format\n        time_format = \"%Y-%m-%dT%H:%M:%S\"\n        # Parsing datetimes\n        if from_time is not None:\n            try:\n                params[\"from\"] = datetime.strftime(from_time, time_format)\n            except Exception:\n                raise IllegalParamFrom(\"Failed to format input\")\n        if till_time is not None:\n            try:\n                params[\"till\"] = datetime.strftime(till_time, time_format)\n            except Exception:\n                raise IllegalParamTill(\"Failed to format input\")\n        if start_record is not None:\n            params[\"start_record\"] = start_record\n        if records is not None:\n            params[\"records\"] = str(records)\n        if details is not None:\n            params[\"details\"] = details\n        # Generating URL\n        url = f\"{self._base_url}/api/operation-history\"\n        response = requests.post(url=url, headers=self.headers, data=params) \n        # Errors processing\n        if response.status_code in [401, 403]:\n            raise InvalidToken\n        response = response.json()\n        if \"error\" in response:\n            if response[\"error\"] == \"illegal_param_type\":\n                raise IllegalParamType(\"Try to redefine it in another way\")\n            elif response[\"error\"] == \"illegal_param_start_record\":\n                raise IllegalParamStartRecord(\"Try to redefine it in another way'\")\n            elif response[\"error\"] == \"illegal_param_records\":\n                raise IllegalParamRecords(\"Try to redefine it in another way'\")\n            elif response[\"error\"] == \"illegal_param_label\":\n                raise IllegalParamLabel(\"Try to redefine it in another way'\")\n            elif response[\"error\"] == \"illegal_param_from\":\n                raise IllegalParamFrom(\"Try to redefine it in another way'\")\n            elif response[\"error\"] == \"illegal_param_till\":\n                raise IllegalParamTill(\"Try to redefine it in another way'\")\n            else:\n                raise HistoryTechicalError(\"Try again later'\")\n        return OperationHistory(response)\n\n    def quickpay(\n            self,\n            sum: float,\n            payment_type: str = \"AC\",\n            label: Optional[str] = None,\n            success_url: Optional[str] = None\n            ) -&gt; Dict[str, Any]: # type: ignore\n        \"\"\"Creating fundraising link\n\n        Example:\n        ```python\n        from yoowallet.sync import App\n\n        app: App = App(\"TOKEN\")\n        if not app.connect():\n            raise ValueError('Token is invalid!')\n        # Generating fundraising for 5 RUB\n        payment = app.quickpay(5.0)\n        print(f\"QucikPay URL is {payment['url']}\")\n        ```\n\n        Args:\n            sum (float): Transfer amount (the amount debited from the sender)\n            payment_type (str): PC for a payment from a YooMoney wallet, AC for a payment from a bank card\n            label (str): The label that a site or app assigns to a certain transfer\n            success_url (str): URL where the user is redirected after the transfer\n\n        Returns:\n            Python dictionary with fields: url and amount_due (the amount, that will be received)\n        \"\"\"\n        # Getting the number of YooMoney wallet\n        receiver: str = (self.account_info()).account\n        # Computing the amount to be received\n        commissions = {\"PC\": 0.01, \"AC\": 0.03}\n        amount_due: float = sum*(1-commissions[payment_type])\n        # Generating params\n        params = {}\n        params[\"receiver\"] = receiver\n        params[\"sum\"] = sum\n        params[\"quickpay-form\"] = \"button\"\n        params[\"paymentType\"] = payment_type\n        if label:\n            params[\"label\"] = label\n        if success_url:\n            params[\"successURL\"] = success_url\n        response = requests.post(url=\"https://yoomoney.ru/quickpay/confirm\", headers=self.headers, data=params)\n        if response.status_code == 200:\n            return {\"url\": response.url, \"amount_due\": amount_due}\n        else:\n            # There must be an error handler, but YooMoney didn't provide\n            # any error list for QuickPay :(\n            raise FailedQuickPayGen(response.status_code)\n\n    def get_by_label(self, label: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Checks whether payment with such label exists\n\n        Args:\n            label (str): Lable of needed operation\n\n        Returns:\n            Operation details \n        \"\"\"\n        operation = self.operation_history(label = label).operations\n        if not operation or len(operation) &gt; 1:\n            return\n        return operation[0]\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.sync.App.account_info","title":"<code>account_info()</code>","text":"<p>Getting account information. Needs at least this scope: [\"account-info\"]</p> <p>Returns:</p> Type Description <code>AccountInfo</code> <p>AccountInfo entity</p> Source code in <code>yoowallet/sync/app.py</code> <pre><code>def account_info(self) -&gt; AccountInfo:\n    \"\"\"Getting account information. Needs at least this scope: [\"account-info\"]\n\n    Returns:\n        AccountInfo entity\n    \"\"\"\n    # Generating URL\n    url = f\"{self._base_url}/api/account-info\"\n    response = requests.post(url=url, headers=self.headers)\n    if response.status_code == 200:\n        response = response.json()\n        return AccountInfo(response)\n    elif response.status_code == 401:\n        raise InvalidToken \n    else:\n        raise AccountInfoError(f\"Undefined error, answer: {response}\")\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.sync.App.connect","title":"<code>connect()</code>","text":"<p>Verifying App's token via getting account information</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if token is valid, False if invalid</p> Source code in <code>yoowallet/sync/app.py</code> <pre><code>def connect(self) -&gt; bool:\n    \"\"\"Verifying App's token via getting account information\n\n    Returns:\n        True if token is valid, False if invalid\n    \"\"\"\n    try:\n        self.account_info()\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.sync.App.get_by_label","title":"<code>get_by_label(label)</code>","text":"<p>Checks whether payment with such label exists</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>Lable of needed operation</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Operation details</p> Source code in <code>yoowallet/sync/app.py</code> <pre><code>def get_by_label(self, label: str) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Checks whether payment with such label exists\n\n    Args:\n        label (str): Lable of needed operation\n\n    Returns:\n        Operation details \n    \"\"\"\n    operation = self.operation_history(label = label).operations\n    if not operation or len(operation) &gt; 1:\n        return\n    return operation[0]\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.sync.App.operation_history","title":"<code>operation_history(type=None, label=None, from_time=None, till_time=None, start_record=None, records=None, details=None)</code>","text":"<p>Getting operation history. Needs at least this scope: [\"operation-history\", \"operation-details\"]</p> <p>Example: <pre><code>from yoowallet.sync import App\nfrom yoowallet.types import OperationHistory\n\n# ! Provide scope if you want not just get account information\napp: App = App(\"TOKEN\")\nif not app.connect():\n    raise ValueError('Token is invalid!')\napp_info = app.operation_history()\napp_info.debug()\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Optional[List[str]]</code> <p>Operation types (deposition or payment)</p> <code>None</code> <code>label</code> <code>Optional[str]</code> <p>Filtering value (custom operation id)</p> <code>None</code> <code>from_time</code> <code>Optional[datetime]</code> <p>Operations from this timestamp</p> <code>None</code> <code>till_time</code> <code>Optional[datetime]</code> <p>Operations till this timestamp</p> <code>None</code> <code>start_record</code> <code>Optional[str]</code> <p>Operations from this number</p> <code>None</code> <code>records</code> <code>Optional[int]</code> <p>Number of history records</p> <code>None</code> <code>details</code> <code>Optional[bool]</code> <p>Show operation details (True or False)</p> <code>None</code> <p>Returns:</p> Type Description <code>OperationHistory</code> <p>OperationHistory entity</p> Source code in <code>yoowallet/sync/app.py</code> <pre><code>def operation_history(\n        self,\n        type: Optional[List[str]] = None,\n        label: Optional[str] = None,\n        from_time: Optional[datetime] = None,\n        till_time: Optional[datetime] = None,\n        start_record: Optional[str] = None,\n        records: Optional[int] = None,\n        details: Optional[bool] = None\n        ) -&gt; OperationHistory:\n    \"\"\"Getting operation history. Needs at least this scope: [\"operation-history\", \"operation-details\"]\n\n    Example:\n    ```python\n    from yoowallet.sync import App\n    from yoowallet.types import OperationHistory\n\n    # ! Provide scope if you want not just get account information\n    app: App = App(\"TOKEN\")\n    if not app.connect():\n        raise ValueError('Token is invalid!')\n    app_info = app.operation_history()\n    app_info.debug()\n    ```\n\n    Args:\n        type (Optional[List[str]]): Operation types (deposition or payment)\n        label (Optional[str]): Filtering value (custom operation id)\n        from_time (Optional[datetime]): Operations from this timestamp\n        till_time (Optional[datetime]): Operations till this timestamp\n        start_record (Optional[str]): Operations from this number\n        records (Optional[int]): Number of history records\n        details (Optional[bool]): Show operation details (True or False)\n\n    Returns:\n        OperationHistory entity\n    \"\"\"\n    # Generating request params\n    params = {}\n    if type is not None:\n        params[\"type\"] = type\n    if label is not None:\n        params[\"label\"] = label\n    # Defining default time format\n    time_format = \"%Y-%m-%dT%H:%M:%S\"\n    # Parsing datetimes\n    if from_time is not None:\n        try:\n            params[\"from\"] = datetime.strftime(from_time, time_format)\n        except Exception:\n            raise IllegalParamFrom(\"Failed to format input\")\n    if till_time is not None:\n        try:\n            params[\"till\"] = datetime.strftime(till_time, time_format)\n        except Exception:\n            raise IllegalParamTill(\"Failed to format input\")\n    if start_record is not None:\n        params[\"start_record\"] = start_record\n    if records is not None:\n        params[\"records\"] = str(records)\n    if details is not None:\n        params[\"details\"] = details\n    # Generating URL\n    url = f\"{self._base_url}/api/operation-history\"\n    response = requests.post(url=url, headers=self.headers, data=params) \n    # Errors processing\n    if response.status_code in [401, 403]:\n        raise InvalidToken\n    response = response.json()\n    if \"error\" in response:\n        if response[\"error\"] == \"illegal_param_type\":\n            raise IllegalParamType(\"Try to redefine it in another way\")\n        elif response[\"error\"] == \"illegal_param_start_record\":\n            raise IllegalParamStartRecord(\"Try to redefine it in another way'\")\n        elif response[\"error\"] == \"illegal_param_records\":\n            raise IllegalParamRecords(\"Try to redefine it in another way'\")\n        elif response[\"error\"] == \"illegal_param_label\":\n            raise IllegalParamLabel(\"Try to redefine it in another way'\")\n        elif response[\"error\"] == \"illegal_param_from\":\n            raise IllegalParamFrom(\"Try to redefine it in another way'\")\n        elif response[\"error\"] == \"illegal_param_till\":\n            raise IllegalParamTill(\"Try to redefine it in another way'\")\n        else:\n            raise HistoryTechicalError(\"Try again later'\")\n    return OperationHistory(response)\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.sync.App.quickpay","title":"<code>quickpay(sum, payment_type='AC', label=None, success_url=None)</code>","text":"<p>Creating fundraising link</p> <p>Example: <pre><code>from yoowallet.sync import App\n\napp: App = App(\"TOKEN\")\nif not app.connect():\n    raise ValueError('Token is invalid!')\n# Generating fundraising for 5 RUB\npayment = app.quickpay(5.0)\nprint(f\"QucikPay URL is {payment['url']}\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>sum</code> <code>float</code> <p>Transfer amount (the amount debited from the sender)</p> required <code>payment_type</code> <code>str</code> <p>PC for a payment from a YooMoney wallet, AC for a payment from a bank card</p> <code>'AC'</code> <code>label</code> <code>str</code> <p>The label that a site or app assigns to a certain transfer</p> <code>None</code> <code>success_url</code> <code>str</code> <p>URL where the user is redirected after the transfer</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Python dictionary with fields: url and amount_due (the amount, that will be received)</p> Source code in <code>yoowallet/sync/app.py</code> <pre><code>def quickpay(\n        self,\n        sum: float,\n        payment_type: str = \"AC\",\n        label: Optional[str] = None,\n        success_url: Optional[str] = None\n        ) -&gt; Dict[str, Any]: # type: ignore\n    \"\"\"Creating fundraising link\n\n    Example:\n    ```python\n    from yoowallet.sync import App\n\n    app: App = App(\"TOKEN\")\n    if not app.connect():\n        raise ValueError('Token is invalid!')\n    # Generating fundraising for 5 RUB\n    payment = app.quickpay(5.0)\n    print(f\"QucikPay URL is {payment['url']}\")\n    ```\n\n    Args:\n        sum (float): Transfer amount (the amount debited from the sender)\n        payment_type (str): PC for a payment from a YooMoney wallet, AC for a payment from a bank card\n        label (str): The label that a site or app assigns to a certain transfer\n        success_url (str): URL where the user is redirected after the transfer\n\n    Returns:\n        Python dictionary with fields: url and amount_due (the amount, that will be received)\n    \"\"\"\n    # Getting the number of YooMoney wallet\n    receiver: str = (self.account_info()).account\n    # Computing the amount to be received\n    commissions = {\"PC\": 0.01, \"AC\": 0.03}\n    amount_due: float = sum*(1-commissions[payment_type])\n    # Generating params\n    params = {}\n    params[\"receiver\"] = receiver\n    params[\"sum\"] = sum\n    params[\"quickpay-form\"] = \"button\"\n    params[\"paymentType\"] = payment_type\n    if label:\n        params[\"label\"] = label\n    if success_url:\n        params[\"successURL\"] = success_url\n    response = requests.post(url=\"https://yoomoney.ru/quickpay/confirm\", headers=self.headers, data=params)\n    if response.status_code == 200:\n        return {\"url\": response.url, \"amount_due\": amount_due}\n    else:\n        # There must be an error handler, but YooMoney didn't provide\n        # any error list for QuickPay :(\n        raise FailedQuickPayGen(response.status_code)\n</code></pre>"},{"location":"en/api_reference.html#types","title":"Types","text":""},{"location":"en/api_reference.html#entity","title":"Entity","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class, which represents the skelet of API response entities (like account info)</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Dict[Any, Any]</code> <p>Dictionary, got from raw response </p> required <p>Attributes:</p> Name Type Description <code>ctx</code> <code>Dict[Any, Any]</code> <p>Dictionary, got from raw response</p> <code>required_scope</code> <code>List[str]</code> <p>Required permission for dealing with this entity</p> Source code in <code>yoowallet/types.py</code> <pre><code>class Entity(ABC):\n    \"\"\"Abstract class, which represents the skelet of API response entities (like account info)\n\n    Args:\n        ctx (Dict[Any, Any]): Dictionary, got from raw response \n\n    Attributes:\n        ctx (Dict[Any, Any]): Dictionary, got from raw response\n        required_scope (List[str]): Required permission for dealing with this entity\n    \"\"\"\n    def __init__(self, ctx: Dict[Any, Any], required_scope: List[str]) -&gt; None:\n        self._ctx = ctx\n        self._required_scope = required_scope\n\n    @property\n    def ctx(self) -&gt; Dict[Any, Any]:\n        \"\"\"Dictionary from raw request\"\"\"\n        return self._ctx\n\n    @property\n    def required_scope(self) -&gt; List[str]:\n        \"\"\"Required permissions for dealing with this entity\"\"\"\n        return self._required_scope\n\n    @property\n    def keys(self) -&gt; List[str]:\n        \"\"\"Available entity fields. Defining in 'parse' method\"\"\"\n        return self._keys\n\n    def parse(self) -&gt; None:\n        \"\"\"Parsing provided context\"\"\"\n        # List of available keys\n        self._keys = list(self.ctx.keys())\n        for attr in self.ctx.keys():\n            setattr(self, \"_\"+attr, self.ctx[attr])\n\n    def debug(self) -&gt; None:\n        \"\"\"Prints debug information\"\"\"\n        print(f\"[?] Debug for {self.__class__.__name__}:\")\n        for attr in self.keys:\n            print(f\"- {attr} ({type(getattr(self, attr))}): {getattr(self, attr)}\")\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.types.Entity.ctx","title":"<code>ctx: Dict[Any, Any]</code>  <code>property</code>","text":"<p>Dictionary from raw request</p>"},{"location":"en/api_reference.html#yoowallet.types.Entity.keys","title":"<code>keys: List[str]</code>  <code>property</code>","text":"<p>Available entity fields. Defining in 'parse' method</p>"},{"location":"en/api_reference.html#yoowallet.types.Entity.required_scope","title":"<code>required_scope: List[str]</code>  <code>property</code>","text":"<p>Required permissions for dealing with this entity</p>"},{"location":"en/api_reference.html#yoowallet.types.Entity.debug","title":"<code>debug()</code>","text":"<p>Prints debug information</p> Source code in <code>yoowallet/types.py</code> <pre><code>def debug(self) -&gt; None:\n    \"\"\"Prints debug information\"\"\"\n    print(f\"[?] Debug for {self.__class__.__name__}:\")\n    for attr in self.keys:\n        print(f\"- {attr} ({type(getattr(self, attr))}): {getattr(self, attr)}\")\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.types.Entity.parse","title":"<code>parse()</code>","text":"<p>Parsing provided context</p> Source code in <code>yoowallet/types.py</code> <pre><code>def parse(self) -&gt; None:\n    \"\"\"Parsing provided context\"\"\"\n    # List of available keys\n    self._keys = list(self.ctx.keys())\n    for attr in self.ctx.keys():\n        setattr(self, \"_\"+attr, self.ctx[attr])\n</code></pre>"},{"location":"en/api_reference.html#accountinfo","title":"AccountInfo","text":"<p>               Bases: <code>Entity</code></p> <p>Provides interface for account information Args:     ctx (Dict[Any, Any]): Dictionary, got using '/api/account-info' request</p> <p>Attributes:</p> Name Type Description <code>ctx</code> <code>Dict[Any, Any]</code> <p>Dictionary, got using '/api/account-info' request</p> Source code in <code>yoowallet/types.py</code> <pre><code>class AccountInfo(Entity):\n    \"\"\"Provides interface for account information\n    Args:\n        ctx (Dict[Any, Any]): Dictionary, got using '/api/account-info' request\n\n    Attributes:\n        ctx (Dict[Any, Any]): Dictionary, got using '/api/account-info' request \n    \"\"\"\n    def __init__(self, ctx: Dict[Any, Any]) -&gt; None:\n        super().__init__(ctx, [\"account-info\"])\n        try:\n            self.parse()\n        except Exception as e:\n            raise AccountInfoError(f\"Failed to parse account info: {e}\")\n\n    # Defining fields\n    @property\n    def account(self) -&gt; str:\n        \"\"\"User\u2019s account number\"\"\"\n        try:\n            return self._account # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"account\")\n\n    @property\n    def balance(self) -&gt; str:\n        \"\"\"User\u2019s account balance\"\"\"\n        try:\n            return self._balance # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"balance\")\n\n    @property\n    def currency(self) -&gt; str:\n        \"\"\"User\u2019s account currency code (always 643)\"\"\"\n        try:\n            return self._currency # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"currency\")\n\n    @property\n    def account_status(self) -&gt; str:\n        \"\"\"The user\u2019s status\"\"\"\n        try:\n            return self._account_status # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"account_status\")\n\n    @property\n    def account_type(self) -&gt; str:\n        \"\"\"User\u2019s account type\"\"\"\n        try:\n            return self._account_type # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"account_type\")\n\n    @property\n    def identified(self) -&gt; str:\n        \"\"\"User\u2019s account identification\"\"\"\n        try:\n            return self._identified # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"identified\")\n\n    @property\n    def balance_details(self) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Detailed information about the balance (by default, this section is omitted)\"\"\"\n        try:\n            return self._balance_details # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"balance_details\")\n\n    @property\n    def cards_linked(self) -&gt; Optional[List[Dict[str, Any]]]:\n        \"\"\"Information about bank cards linked to the account\"\"\"\n        try:\n            return self._cards_linked # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"cards_linked\")\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.account","title":"<code>account: str</code>  <code>property</code>","text":"<p>User\u2019s account number</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.account_status","title":"<code>account_status: str</code>  <code>property</code>","text":"<p>The user\u2019s status</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.account_type","title":"<code>account_type: str</code>  <code>property</code>","text":"<p>User\u2019s account type</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.balance","title":"<code>balance: str</code>  <code>property</code>","text":"<p>User\u2019s account balance</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.balance_details","title":"<code>balance_details: Optional[Dict[str, Any]]</code>  <code>property</code>","text":"<p>Detailed information about the balance (by default, this section is omitted)</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.cards_linked","title":"<code>cards_linked: Optional[List[Dict[str, Any]]]</code>  <code>property</code>","text":"<p>Information about bank cards linked to the account</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.currency","title":"<code>currency: str</code>  <code>property</code>","text":"<p>User\u2019s account currency code (always 643)</p>"},{"location":"en/api_reference.html#yoowallet.types.AccountInfo.identified","title":"<code>identified: str</code>  <code>property</code>","text":"<p>User\u2019s account identification</p>"},{"location":"en/api_reference.html#operationhistory","title":"OperationHistory","text":"<p>               Bases: <code>Entity</code></p> <p>Provides interface for operation history  Args:     ctx (Dict[Any, Any]): Dictionary, got using '/api/operation-history' request</p> <p>Attributes:</p> Name Type Description <code>ctx</code> <code>Dict[Any, Any]</code> <p>Dictionary, got using '/api/operation-history' request</p> Source code in <code>yoowallet/types.py</code> <pre><code>class OperationHistory(Entity):\n    \"\"\"Provides interface for operation history \n    Args:\n        ctx (Dict[Any, Any]): Dictionary, got using '/api/operation-history' request\n\n    Attributes:\n        ctx (Dict[Any, Any]): Dictionary, got using '/api/operation-history' request\n    \"\"\"\n    def __init__(self, ctx: Dict[Any, Any]) -&gt; None:\n        super().__init__(ctx, [\"operation-history\", \"operation-details\"])\n        try:\n            self.parse()\n        except Exception as e:\n            raise OperationHistoryError(f\"Failed to parse operation history: {e}\")\n\n    @property\n    def next_record(self) -&gt; str:\n        \"\"\"The number of the first history record on the next page\"\"\"\n        try:\n            return self._next_record # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"next_record\")\n\n    @property\n    def operations(self) -&gt; Optional[List[Dict[str, Any]]]:\n        \"\"\"List of operations\"\"\"\n        try:\n            return self._operations # type: ignore\n        except Exception:\n            raise NoSuchAttribute(\"operations\")\n</code></pre>"},{"location":"en/api_reference.html#yoowallet.types.OperationHistory.next_record","title":"<code>next_record: str</code>  <code>property</code>","text":"<p>The number of the first history record on the next page</p>"},{"location":"en/api_reference.html#yoowallet.types.OperationHistory.operations","title":"<code>operations: Optional[List[Dict[str, Any]]]</code>  <code>property</code>","text":"<p>List of operations</p>"},{"location":"en/authorization.html","title":"Authorization","text":"<p>First of all, you must create Yoomoney application. To do it - follow the link: https://yoomoney.ru/myservices/new.</p> <p>Fill in fields (don't select OAuth2!) and push the button.</p> <p>Now you must remember client_id and redirect_url, gonna be used in Authorizer.</p> <p>Before using yoowallet you must generate token.</p> <p>When getting token - you connect the application to your wallet and provide certain permissions. These permissions called scope.</p>"},{"location":"en/authorization.html#scope","title":"Scope","text":"<p>Scope must be provided to Authorizer when generating token as a python list.</p> <p>This table describes all the supported permissions:</p> <p>Source</p> <p>All permissions are got here: https://yoomoney.ru/docs/wallet/using-api/authorization/protocol-rights</p> Permission Description account-info Getting account info operation-history Getting operation history operation-details Getting details about operation payment Ability to pay in shops and transfer money to other wallets payment-shop Ability to buy in registered shops payment-p2p Ability to transfer money to other wallets <p>Other permissions</p> <p>Permissions, which have not been metioned are not supported (they may work, but do not have to)</p>"},{"location":"en/authorization.html#token","title":"Token","text":"<p>Now you are ready to generate token.</p> <p>The following code snippet will help you: <pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.utils import Authorizer\nfrom yoowallet.types import AccountInfo\n\nCLIENT_ID = \"your client_id here\"\nREDIRECT_URI = \"your redirect_uri here\"\n\nasync def main():\n    # Creating token\n    # Provide scope, if you need nore abilities,\n    # default is ['account-info']\n    auth = Authorizer(\n        CLIENT_ID,\n        REDIRECT_URI\n    )\n    print(await auth.generate_code_url())\n    code = input(\"Enter code: \")\n    print(\"Your token is:\")\n    print(await auth.get_token(code))\n    # Testing\n    app: App = App(auth.token)\n    if not await app.connect():\n        raise ValueError(\"Token is invalid!\")\n    print(\"App is ready!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"en/authorization.html#revoking-token","title":"Revoking token","text":"<p>If you generated token with wrong scope or it became useless,  than the best way is to revoke it.</p> <p>Perform it using this code: <pre><code>import asyncio\nfrom yoowallet.utils import revoke_token\n\nTOKEN = \"your token here\"\n\nasync def main():\n    if await revoke_token(TOKEN):\n        print(\"Token is revoked!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main()\n</code></pre></p>"},{"location":"en/development.html","title":"YooWallet SDK development","text":"<p>If you want to take part in YooWallet live:</p> <ul> <li>Contribute to git repo  ( are welcomed as well )</li> <li>Join developers telegram channel  (here you can ask some questions )</li> <li>Subscribe to main developer's YouTube  or Telegram channel  channel (new versions, features, fixes and so on will be anounced)</li> </ul>"},{"location":"en/installation.html","title":"Installation","text":"<p>There are two ways of installation:</p> <ul> <li>via PyPI</li> <li>from source</li> </ul> <p>Python virtual environment</p> <p>Installation and usage must be performed in virtual environment: <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre></p>"},{"location":"en/installation.html#via-pypi","title":"Via PyPI","text":"<p>You can simply install SDK via PyPI: <pre><code># Basic\npip install yoowallet\n\n# With synchronous API support\npip install yoowallet[sync]\n\n# With packages for developing\npip install yoowallet[dev]\n</code></pre></p>"},{"location":"en/installation.html#from-source","title":"From source","text":"<p>Getting SDK from source is also an option: <pre><code>git clone &lt;repo&gt;\ncd yoowallet\npip install .\n</code></pre></p> <p>Now it's time to create an application </p>"},{"location":"en/quickstart.html","title":"Quick Start","text":"<p>Here will be provided several examples on YooWallet usage.</p> <p>Examples</p> <p>All usage examples are available in tests/ dir in the root of the project</p> <ul> <li>Getting account info</li> <li>Getting operation history</li> <li>QuickPay</li> <li>Sync API</li> <li>HTTP notifications</li> </ul>"},{"location":"en/quickstart.html#getting-account-info","title":"Getting account info","text":"<pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.types import AccountInfo\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"Token is invalid!\")\n    app_info: AccountInfo = await app.account_info()\n    app_info.debug()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"en/quickstart.html#getting-operation-history","title":"Getting operation history","text":"<p>More info</p> <p>Go to API Reference to get the complete information about parameters</p> <pre><code>import asyncio\nfrom yoowallet import App\nfrom yoowallet.types import OperationHistory\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"Token is invalid!\")\n    # Operation history without filters\n    history: OperationHistory = await app.operation_history()\n    print(\"[*] The entire operation history:\")\n    history.debug()\n\n    # Operation history for the last hour\n    from datetime import datetime\n    date = datetime.now()\n    date = date.replace(hour = date.hour - 1)\n    history: OperationHistory = await app.operation_history(from_time = date)\n    print(\"[*] Operation history for he last hour:\")\n    history.debug()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"en/quickstart.html#quickpay","title":"QuickPay","text":"<p>About QuickPay</p> <p>QuickPay is used to receive donates via link. You can set label for such link and verify it's status in operation history</p> <p>You can generate link for fundraising: <pre><code>import asyncio\nfrom yoowallet import App\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"Token is invalid!\")\n    # Set label to get it in operation history\n    payment = await app.quickpay(2.0, label = \"some_random_unique_id\")\n    print(f\"[*] Payment link: {payment['url']} ({payment['amount_due']} RUB will be received)\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> <p>By the way, there is an App method for easily receiving QuickPay status from operation history: <pre><code>import asyncio\nfrom yoowallet import App\n\nasync def main(): \n    app: App = App(\"TOKEN\")\n    if not await app.connect():\n        raise ValueError(\"Token is invalid!\")\n    if await app.get_by_label(\"your label\"):\n        print(\"[*] Payment was successfully received\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"en/quickstart.html#sync-api","title":"Sync API","text":"<p>For some reason you may need for synchronously using Yoowallet, so there is support for Sync API. App from Sync API has the same methods as the async one:</p> <p>Sync API</p> <p>To use sync API - you must install yoowallet in special edition. Go to installation for more info.</p> <pre><code>from yoowallet.sync import App\nfrom yoowallet.types import AccountInfo\n\napp: App = App(\"TOKEN\")\nif not app.connect():\n    raise ValueError(\"Token is invalid!\")\napp.account_info().debug()\n</code></pre>"},{"location":"en/quickstart.html#http-notification-server","title":"HTTP notification server","text":"<p>WARNING</p> <p>Notification server has not been finished yet. Due to a lack of testing it may be VERY unstable. So, when server is finally written - you will see usage info here</p> <p>But you can still try it via example in tests/ dir at your own risk.</p>"}]}